#ifndef CONSTANTS_H
#define CONSTANTS_H

typedef enum ERRORS { NO_ERROR, ERR_SYNTAX, ERR_OVERFLOW, ERR_UNKNOWN_TOKEN, ERR_UNDEFINED, ERR_OUT_OF_BOUNDS_ANSWER } ERRS;

typedef enum COMMANDS { CMD_NULL, CMD_QUIT, CMD_SCI, CMD_DEC, CMD_LS } COMMS;

typedef enum KEYWORD_STATES { KWS_NULL, KWS_READY, KWS_PREASSIGN, KWS_ASSIGN } KWSS;

typedef enum DATA_TYPES {
	TYPE_FREE, TYPE_DOUBLE, TYPE_FLOAT, TYPE_INT, TYPE_CPLX_RECT, TYPE_CPLX_POLAR,
	TYPE_STRING_HEAD, TYPE_DOUBLE_HEAD, TYPE_FLOAT_HEAD, TYPE_INT_HEAD, TYPE_CPLX_RECT_HEAD, TYPE_CPLX_POLAR_HEAD,
	TYPE_STRING, TYPE_DOUBLE_ARR, TYPE_FLOAT_ARR, TYPE_INT_ARR, TYPE_CPLX_RECT_ARR, TYPE_CPLX_POLAR_ARR
} TYPES;

#define OUTPUT_DECIMAL 0
#define OUTPUT_SCIENTIFIC 1

#define NR_FUNCTIONS 78
#define INPUT_HOLDER_SIZE 32
#define INPUT_SIZE 1024
#define RPN_SIZE 512
#define STACK_SIZE 256
#define LOAD_VAR_HOLDER_SIZE 128
#define FILENAME_SIZE 64

#define pi               3.14159265358979323846
#define RAD_TO_DEG_CONST 57.2957795130823228646
#define DEG_TO_RAD_CONST 0.01745329251994329547

#define CONST_START 2
#define ANS_ADDR 1
#define USER_VAR_START 64
#define VAR_NAME_SIZE 500
#define VAR_MAP_SIZE 8000
#define EVAL_VARS_START VAR_MAP_SIZE - 1000
#define OPERATOR_START 16000  // Must be larger than VAR_MAP_SIZE
#define USER_FUNC_START 32000 // Must be larger than OPERATOR_START

typedef enum OPERATORS {
	//============= BINARY (expept for NEG and NOT) =============//
	/* basic        */ OP_NULL = OPERATOR_START, OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_NEG,
	/* equality     */ OP_IS, OP_GREATER_THAN, OP_LESS_THAN, OP_GREATER_THAN_EQUAL_TO, OP_LESS_THAN_EQUAL_TO,
	/* logic        */ OP_AND, OP_OR, OP_NOT, OP_XOR, OP_IMPLIES, OP_IFF, OP_IMPLIED_BY,
	/* bitwise      */ OP_RIGHT_SHIFT, OP_LEFT_SHIFT, OP_BITWISE_AND, OP_BITWISE_OR, OP_BITWISE_NOT, OP_BITWISE_XOR,
	/* powers       */ OP_EXP, END_OPS = OP_EXP, OP_LOG, OP_ROOT,
	/* discrete     */ OP_DIV_INT, OP_GCD, OP_LCM, OP_NCR, OP_NPR,
	/* trig-related */ OP_ATAN2,
	/* misc         */ OP_HYPOT, OP_REQLL, OP_PERR,
	//========================== UNARY ==========================//
	/* powers       */ OP_LOG2, UNARY_OPERATORS = OP_LOG2, OP_LOG10, OP_LN, OP_SQRT, OP_CBRT,
	/* trig         */ OP_SIN, OP_COS, OP_TAN, OP_SEC, OP_CSC, OP_COT, OP_ASIN, OP_ACOS, OP_ATAN, OP_ASEC, OP_ACSC, OP_ACOT,
	/* hyperbolic   */ OP_SINH, OP_COSH, OP_TANH, OP_SECH, OP_CSCH, OP_COTH, OP_ASINH, OP_ACOSH, OP_ATANH, OP_ASECH, OP_ACSCH, OP_ACOTH,
	/* discrete     */ OP_CEIL, OP_FLOOR, OP_ROUND, OP_TRUNC, OP_SIGN, OP_ABS,
	/* trig-related */ OP_SINC, OP_NSINC, OP_DEG, OP_RAD,
	/* misc         */ OP_ERF, OP_ERFC, OP_GAMMA, OP_LGAMMA,

	//========================== OTHER ==========================//
	/* instructions */ INST_ASSIGN_VAL, END_FUNCS = INST_ASSIGN_VAL, INST_JUMP, INST_JUMP_IF_FALSE,
	/* flow         */ ARG_SEPARATOR, LEFT_PARENTH, RIGHT_PARENTH,
	/* keywords     */ KW_BEGIN, KW_IF = KW_BEGIN, KW_ELIF, KW_ELSE, KW_SWITCH, KW_CASE, KW_WHILE, KW_FOR, KW_GOTO, KW_BREAK,
	/* keywords     */ KW_CONTINUE, KW_DEF, KW_CLASS, KW_RETURN, KW_DEL, KW_INT
} OPS;

#endif
